import bcrypt from 'bcryptjs';
import Database from '../config/database';
import UserModel from '../models/User';
import logger from './logger';

export async function seedDatabase(): Promise<void> {
  try {
    const db = Database;
    
    // Check if admin user already exists
    const existingAdmin = await UserModel.findByEmail('admin@admin.com');
    
    if (existingAdmin) {
      logger.info('Admin user already exists, skipping seed');
      return;
    }

    // Check if any users exist
    const userCount = await db.get<{ count: number }>(
      'SELECT COUNT(*) as count FROM users'
    );

    if (userCount && userCount.count > 0) {
      logger.info('Users already exist in database, skipping admin creation');
      return;
    }

    // Create default admin user
    logger.info('Creating default admin user...');
    
    const saltRounds = 12;
    const passwordHash = await bcrypt.hash('admin123', saltRounds);

    await db.run(
      `INSERT INTO users (username, email, password_hash, is_admin) 
       VALUES (?, ?, ?, ?)`,
      ['admin', 'admin@admin.com', passwordHash, 1]
    );

    logger.info('✅ Default admin user created successfully');
    logger.info('📧 Email: admin@admin.com');
    logger.info('🔑 Password: admin123');
    logger.info('⚠️  Please change the default password after first login!');

  } catch (error) {
    logger.error('Failed to seed database:', error);
    throw error;
  }
}

if (require.main === module) {
  seedDatabase()
    .then(() => {
      logger.info('Database seeding complete');
      process.exit(0);
    })
    .catch((error) => {
      logger.error('Database seeding failed:', error);
      process.exit(1);
    });
}